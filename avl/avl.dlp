record AvlType {
    i: int;
}

// Must return negative if left is less than right, positive if left is greater than right and zero if equal.
int avl_compare(left: AvlType, right: AvlType) {
    return left.i - right.i;
}

record AvlNode {
    val: AvlType;
    left: AvlNode;
    right: AvlNode;
    parent: AvlNode;
    height: int;
}

record AvlTree {
    root: AvlNode;
}

string avl_type_to_string(t: AvlType) {
    return int_to_string(t.i);
}

string avl_print_tree(tree: AvlTree) {
    return __avl_print_tree(tree.root, "");
}

string __avl_print_tree(node: AvlNode, prefix: string) {
    if (node == nil) return "";
    var indent = string_concat("    ", prefix);
    var start = string_concat(prefix, "[\n");
    var left = __avl_print_tree(node.left, indent);
    var val = string_concat(string_concat(indent, avl_type_to_string(node.val)), "\n");
    var right = __avl_print_tree(node.right, indent);
    var end = string_concat(prefix, "]\n");
    return string_concat(start, string_concat(left, string_concat(val, string_concat(right, end))));
}

AvlTree avl_empty() {
    return new AvlTree { root = nil; };
}

// Returns false if not found. Returns true if found w.r.t avl_compare.
bool avl_contains(tree: AvlTree, key: AvlType) {
    return avl_search(tree, key) != nil;
}

// Returns nil if not found. Returns a value if found. The value is equal w.r.t avl_compare but is not the same as the argument.
AvlType avl_search(tree: AvlTree, key: AvlType) {
    return __avl_search(tree.root, key);
}

// Insert key. If an equal element is already inserted it is not inserted.
void avl_insert(tree: AvlTree, key: AvlType) {
    if (tree.root == nil) tree.root = new AvlNode { val = key; parent = nil; left = nil; right = nil; height = 1; };
    else tree.root = __avl_insert(tree.root, key);
}

AvlType __avl_search(node: AvlNode, key: AvlType) {
    if (node == nil) return nil;
    var comp = avl_compare(key, node.val);
    if (comp < 0) return __avl_search(node.left, key);
    if (comp > 0) return __avl_search(node.right, key);
    return node.val;
}

AvlNode __avl_insert(node: AvlNode, key: AvlType) {
    var comp = avl_compare(key, node.val);
    if (comp < 0 && node.left == nil) node.left = new AvlNode { val = key; parent = node; left = nil; right = nil; height = 1; };
    else if (comp > 0 && node.right == nil) node.right = new AvlNode { val = key; parent = node; left = nil; right = nil; height = 1; };
    else if (comp < 0) node.left = __avl_insert(node.left, key);
    else if (comp > 0) node.right = __avl_insert(node.right, key);
    if (comp == 0) return node;
    __avl_update_height(node);
    var balance = __avl_balance(node);
    if (balance < 0) {
        if (__avl_left_heavy(node.right)) {
            node.right = __avl_rotate_right(node.right);
        }
        return __avl_rotate_left(node);
    }
    if (balance > 0) {
        if (__avl_right_heavy(node.left)) {
            node.left = __avl_rotate_left(node.left);
        }
        return __avl_rotate_right(node);
    }
    return node;
}

void __avl_update_height(node: AvlNode) {
    var left_height = __avl_height(node.left);
    var right_height = __avl_height(node.right);
    node.height = __avl_maxp1(left_height, right_height);
}   

int __avl_maxp1(a: int, b: int) {
    if (a > b) return a + 1;
    else return b + 1;
}

int __avl_balance(node: AvlNode) {
    if (node.left == nil && node.height > 2) return -1;
    if (node.right == nil && node.height > 2) return 1;
    if (node.left != nil && node.left.height + 2 < node.height) return -1;
    if (node.right != nil && node.right.height + 2 < node.height) return 1;
    return 0;
}

bool __avl_right_heavy(node: AvlNode) {
    if (node == nil) return false;
    var left_height = __avl_height(node.left);
    var right_height = __avl_height(node.right);
    return right_height > left_height;
}

bool __avl_left_heavy(node: AvlNode) {
    if (node == nil) return false;
    var left_height = __avl_height(node.left);
    var right_height = __avl_height(node.right);
    return left_height > right_height;
}

int __avl_height(node: AvlNode) {
    if (node == nil) return 0;
    else return node.height;
}

AvlNode __avl_rotate_left(node: AvlNode) {
    var r = node.right;
    var rl = r.left;
    node.right = rl;
    if (rl != nil) rl.parent = node;
    r.left = node;
    r.parent = node.parent;
    node.parent = r;
    __avl_update_height(r);
    __avl_update_height(node);
    return r;
}

AvlNode __avl_rotate_right(node: AvlNode) {
    var l = node.left;
    var lr = l.right;
    node.left = lr;
    if (lr != nil) lr.parent = node;
    l.right = node;
    l.parent = node.parent;
    node.parent = l;
    __avl_update_height(l);
    __avl_update_height(node);
    return l;
}
